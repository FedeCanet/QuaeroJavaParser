package java_quaero.parser;

import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol; 

parser code {:
	
	public static Lexer makeLexer(String input) throws Exception {
		return new Lexer(new StringReader(input));
	}
	
	public static Parser makeParser(String input) throws Exception {
		return new Parser(makeLexer(input));
	}
	
	public static Object parseString(String input) throws Exception {
		Parser parser = Parser.makeParser(input);
		Symbol result = parser.parse();
		return result.value;
	}
:}

// Rules

terminal String ID, STRING;
terminal Double NUM;
terminal Bool BOOL; 
non terminal ins, object, list;
non terminal PARI, PARID, COLON, COMMA, IGUAL, PUNTOCOMA, BICOND, COND, DISY, NEG, CONJ;

init := ID:id PARI ListQ:lq PARD {: RESULT = new QuaeroObject(id); :}

ObjectQ := ObjectQ:obj COMMA Key:key COLON Value:val {: RESULT = obj.put(key, value); :} 
	| ObjectQ:obj COMMA init:list {: RESULT = obj.objectList.add(list) ;:}

Value := STRING:str {: RESULT = new QuaeroString(str); :}
	| NUM:num {: RESULT = new QuaeroDouble(num); :}
	| BOOL:bool {: RESULT = new QuaeroBoolean(bool); :}
	
Key := ID:id {: RESULT = new QuaeroString(id); :}
 
  