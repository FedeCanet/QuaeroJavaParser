package java_quaero.parser;

import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol; 
import java_quaero.ast.*;

parser code {:
	
	public static Lexer makeLexer(String input) throws Exception {
		return new Lexer(new StringReader(input));
	} 
	
	public static Parser makeParser(String input) throws Exception {
		return new Parser(makeLexer(input));
	}
	 
	public static Object parseString(String input) throws Exception {
		Parser parser = Parser.makeParser(input);
		Symbol result = parser.parse();
		return result.value;
	} 
:}

// Rules

terminal String ID, STRING,REGEX;
terminal Double NUM;
terminal Boolean BOOL; 
non terminal ini;
non terminal QuaeroObject aux, objectq;
non terminal Value value;
non terminal QuaeroExpression exp;
non terminal String key; 
terminal PARI, PARD, COLON, COMMA,PLUS,MINUS,UNION,INTER,DOLLAR,TILDE,SLASH,DOT,QUOTE;
precedence left PLUS,MINUS;
precedence left UNION, INTER;
precedence left TILDE,SLASH,DOT;
ini ::= aux:a {: RESULT = a; :}
	| exp:e {: RESULT = e; :} 
	;
aux ::= ID:id PARI objectq:obj PARD {: RESULT = obj; obj.setTag(id); :}
	;
objectq ::= key:key COLON value:val {: RESULT = new QuaeroObject(); RESULT.put(key, val); :}
	| aux:list {: RESULT = new QuaeroObject(); RESULT.getObjectList().add(list); :}
	| key:key COLON value:val COMMA objectq:obj {: RESULT = obj; obj.put(key, val); :}
	| aux:list COMMA objectq:obj {: RESULT = obj; RESULT.getObjectList().add(list); :}
	;
	 
value ::= STRING:str {: RESULT = new QuaeroString(str); :}
	| NUM:num {: RESULT = new QuaeroDouble(num); :}
	| BOOL:bool {: RESULT = new QuaeroBoolean(bool); :}
	;
	
key ::= ID:id {: RESULT = id; :};

exp ::= PARI exp:e PARD {: RESULT = e; :}
	| exp:e SLASH {: RESULT = e; RESULT.onlyElements(); :}
	| exp:e ID:id {: RESULT = e; RESULT.filterByTag(id); :}
	| exp:e TILDE REGEX:r {: RESULT = e; RESULT.filterByRegex(r); :}
	| exp:e TILDE QUOTE REGEX:r QUOTE {: RESULT = e; RESULT.filterByRegex(r); :}
	| exp:e DOT {: RESULT = e; RESULT.onlyAttributes() ; :}
	| exp:e1 UNION exp:e2 {: RESULT = e1; RESULT.union(e2); :}
	| exp:e1 INTER exp:e2 {: RESULT = e1; RESULT.intersection(e2); :}
	| exp:e1 PLUS exp:e2 {: RESULT = e1; RESULT.concatenation(e2); :}
	| exp:e1 MINUS exp:e2 {: RESULT = e1; RESULT.difference(e2); :}
	| DOLLAR aux:qo {: RESULT = new QuaeroExpression(); RESULT.getqObjs().add(qo); :}
	;

 
 
 
  